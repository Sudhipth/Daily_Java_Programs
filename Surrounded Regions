class Solution {
    int row[]={-1,0,1,0};
    int col[]={0,1,0,-1};
    public void dfs(int rr,int cc,char[][] board,int n,int m,int ans[][])
    {
        ans[rr][cc]=1;
         for(int i=0;i<4;i++)
         {
            int r=rr+row[i];
            int c=cc+col[i];
            if(r>=0 && r<n && c>=0 && c<m && ans[r][c]==0 && board[r][c]=='O')
            dfs(r,c,board,n,m,ans);
         }
    }
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        int ans[][]=new int[n][m];
        
        for(int i=0;i<m;i++)
        {
            if(board[0][i]=='O')
            {
                ans[0][i]=1;
            dfs(0,i,board,n,m,ans);
            }
        }
        for(int i=0;i<m;i++)
        {
            if(board[n-1][i]=='O')
            {
                 ans[n-1][i]=1;
            dfs(n-1,i,board,n,m,ans);
            }
        }
         for(int i=0;i<n;i++)
        {
            if(board[i][0]=='O')
            {
                 ans[i][0]=1;
            dfs(i,0,board,n,m,ans);
            }
        }
         for(int i=0;i<n;i++)
        {
            if(board[i][m-1]=='O')
            {
                ans[i][m-1]=1;
                dfs(i,m-1,board,n,m,ans);
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(ans[i][j]==0 && board[i][j]=='O')
                {
                    board[i][j]='X';
                }
            }
        }
    }
}
