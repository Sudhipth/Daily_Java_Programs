class Solution {
    public boolean bfs(int n, int vis[], ArrayList<ArrayList<Integer>> adj) {
       Queue<Integer> q=new LinkedList<>();
       q.add(n);
       vis[n]=0;
       while(!q.isEmpty())
       {
          int node=q.poll();
          for(int it:adj.get(node))
          {
            if(vis[it]==-1)
            {
                vis[it]=1-vis[node];
                q.add(it);
            }
            else if(vis[it]==vis[node])
            return false;
          }
       }
       return true;
    }

    public boolean isBipartite(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            ArrayList<Integer> l = new ArrayList<>();
            for (int j = 0; j < grid[i].length; j++) {
                l.add(grid[i][j]);
            }
            adj.add(l);
        }
        int vis[] = new int[n];
        for (int i = 0; i < n; i++) {
            vis[i] = -1;
        }
        for (int i = 0; i < n; i++) {
            if (vis[i] == -1) {
                if (!bfs(i, vis, adj))
                    return false;
            }
        }
        return true;
    }
}
